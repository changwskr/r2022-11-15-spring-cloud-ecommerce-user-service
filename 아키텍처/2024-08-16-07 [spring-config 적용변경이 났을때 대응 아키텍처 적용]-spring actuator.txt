spring-config 가 변경되었을때 관련되는 서비스는 어떻게 움직여야 되나
첫번째 재기동하는 방법
두번째 actuator reresh 적용
세번째 spring cloud bus 활용

이번에는 actuator refresh 방식을 알아보자,
actuator를 적용하면 각종 메트릭정보를 수신받게 된다.
그래서 이기능을 이용해 user-service를 재기동 하지 않고도 재수신 가능하다.

준비작업
#---------------------------------------------------------------------------------------------------------------------
[dependency]
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
#---------------------------------------------------------------------------------------------------------------------
[application.yaml]
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info, metrics, prometheus
#---------------------------------------------------------------------------------------------------------------------
[websecurity]
    public WebSecurity(Environment env, UserServiceAS userServiceAS, BCryptPasswordEncoder bCryptPasswordEncoder) {
        this.env = env;
        this.userServiceAS = userServiceAS;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.csrf().disable();

        // 기본 통과
        http.authorizeRequests().antMatchers("/actuator/**").permitAll();  ##################################
        http.authorizeRequests().antMatchers("/health_check/**").permitAll();
        http.authorizeRequests().antMatchers("/swagger-resources/**").permitAll();
        http.authorizeRequests().antMatchers("/v2/api-docs").permitAll();
        http.authorizeRequests().antMatchers("/swagger-resources").permitAll();
        http.authorizeRequests().antMatchers("/swagger-resources/**").permitAll();
        http.authorizeRequests().antMatchers("/configuration/ui").permitAll();
        http.authorizeRequests().antMatchers("/configuration/security").permitAll();
        http.authorizeRequests().antMatchers("/webjars/**").permitAll();
        http.authorizeRequests().antMatchers("/h2-console/**").permitAll();
        http.authorizeRequests().antMatchers("/swagger-ui/**").permitAll();



        Boolean AUTH_TYPE_01 = Boolean.FALSE; // users 서비스 허용
        Boolean AUTH_TYPE_02 = Boolean.TRUE; // 특정 IP 만 접근 허용
        Boolean AUTH_TYPE_03 = Boolean.FALSE;
        Boolean AUTH_TYPE_04 = Boolean.FALSE;

        if(AUTH_TYPE_01){
            http.authorizeRequests() // 보호된 자원에 대한 접근 권한을 설정한다.
                    .antMatchers("/users/**") // 이 패턴을 모든 권한을 준다.
                    .permitAll();
        }


        if(AUTH_TYPE_02){
            // 결론 127.0.0.1 인 IP만을 인증할것이고. 추가로 getAuthenticationFilter()에 결려있는 필터를 적용해 주세요
            // 192.168.0.8로 하니깐 에러가 발생하는데 127로 하니 에러는 발생하지 않네

            http.authorizeRequests() // 보호된 리소스에 대한 접근 권한을 설정한다
                    .antMatchers("/**")
                    .hasIpAddress("127.0.0.1") // 이 IP만 허용하고 다른 IP는 제약을 걸어보자
                    .and()
                    .addFilter(getAuthenticationFilter()); //WebSecurity.getAuthenticationFilter() 함수를 만들어 필터작용을 한다.
        }

    ....
    }
#---------------------------------------------------------------------------------------------------------------------
[실행]
http://127.0.0.1:8000/user-service/actuator/headlth
http://127.0.0.1:8000/user-service/actuator/beans
#---------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------


