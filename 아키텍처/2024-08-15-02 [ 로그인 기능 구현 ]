인증을 하기위해 userid/pw를 이용해서 인증된 사용자들에 대해 토큰을 발행한다.
이 토큰은 하루동안 유효하거나 등의 기간을 정해서 내려 보내준다.
이 이 인증을 위해 거래시 request 헤더, reponse 헤더에 저장되어 관리되고
인증을 위해 userserviceas를 활용해서 현재 요청한 사용자의 user id를 있는지 점검한다.


클라이언트에서 로그인 정보를 담기위한 클래스
#----------------------------------------------------------------------------------------------------------------
@Data
public class RequestLoginFormVO {
    @NotNull(message = "Email cannot be null")
    @Size(min = 2, message = "Email not be less than two characters")
    @Email
    private String email;

    @NotNull(message = "Password cannot be null")
    @Size(min = 8, message = "Password must be equals or grater than 8 characters")
    private String password;

}

사용자 인증 처리를 위한 필터 추가
Spring Security를 이용한 로그인 요청 발생 시 작업을 처리해 주는 클래스
#----------------------------------------------------------------------------------------------------------------
@Slf4j
public class AuthenticationFilter extends UsernamePasswordAuthenticationFilter {
    private UserServiceAS userServiceAS;
    private Environment env;

    public AuthenticationFilter(AuthenticationManager authenticationManager,
                                UserServiceAS userServiceAS,
                                Environment env) {
        super.setAuthenticationManager(authenticationManager);
        this.userServiceAS = userServiceAS;
        this.env = env;
    }

여기서 두개의 메소드 구현
attemptAuthentication(HttpServletRequest request,HttpServletResponse response)
#----------------------------------------------------------------------------------------------------------------
ip/pw 를 찾아서 로그인 유무를 결정한는데
    new UsernamePasswordAuthenticationToken(creds.getEmail(), creds.getPassword(),   new ArrayList<>()); 이것을 통해서
    인증 절차를 요청한다.

만약 인증이 성공하면 무엇을 하것인가를 하는 것이
    /*
     * 실제 성공을 했을때 어떻게 할 것인가를 정의한다.
     * 여기서 토큰을 발행한다.
     * 그리고 토큰을 클라이언트로 보낸다. 토큰값은 헤더에 저장되어진다.
     * postman으로 확인하세요 header - token
     */
    @Override
    protected void successfulAuthentication(HttpServletRequest request,
                                            HttpServletResponse response,
                                            FilterChain chain,
                                            Authentication authResult) throws IOException, ServletException {
    이 메소드에서 권한등을 추가하거나 하는 등의 작업을 한다.

다음은 인증이 되면 권한처리를 어디서 할 것인가 이다.
#----------------------------------------------------------------------------------------------------------------
public class WebSecurity extends WebSecurityConfigurerAdapter {
    private UserServiceAS userServiceAS;
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    private Environment env;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
        http.authorizeRequests().antMatchers("/users/**").permitAll();
        http.headers().frameOptions().disable();
    }

application.yaml 토큰 등록
#----------------------------------------------------------------------------------------------------------------
token:
  expiration_time: 86400000
  secret: user_token
#----------------------------------------------------------------------------------------------------------------

여기서 인증에 대한 자격을 가지기위해서 UserDetailService를 상속해야 된다.
#----------------------------------------------------------------------------------------------------------------
public interface UserServiceAS extends UserDetailsService를 구현하고 loadUserByUsername override한다.

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

        UserEntity userEntity = IUserRepositoryDAO.findByEmail(username);

        System.out.println("로그인 요청 -WebSecurity.configure()## - UserServiceImpl.loadUserByUsername()--start-" + username);

        if (userEntity == null)
            throw new UsernameNotFoundException(username + ": not found");

        User user = new User(userEntity.getEmail(), userEntity.getEncryptedPwd(),
                true, true, true, true,
                new ArrayList<>());

        System.out.println("로그인 요청 -WebSecurity.configure()## - UserServiceImpl.loadUserByUsername()--end-" + user);

        return user;
	}

#----------------------------------------------------------------------------------------------------------------

2024-08-15-02 [ 게이트웨이에 로그인 기능 구현 ]
api-gateway 서비스의 application.yaml 수정
#----------------------------------------------------------------------------------------------------------------
      routes:

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # 헤더에 있는 쿠키정보는 제거하자
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
#            - AuthorizationHeaderFilter
        # ---
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/order-service/(?<segment>.*), /$\{segment}
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

        # ---
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/catalog-service/(?<segment>.*), /$\{segment}
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**



controller에서 user-service 매핑을 제거한다.
#----------------------------------------------------------------------------------------------------------------
@RestController
@RequestMapping("/")
public class UserController {
	private final Logger log = LoggerFactory.getLogger(this.getClass());
    private Environment env;
    private UserServiceAS userServiceAS;

    @Autowired



#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------
