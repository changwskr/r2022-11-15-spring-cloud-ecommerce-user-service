이작업을 마치면 user-service는 먼저 bootstrap.yaml를 읽고 다음으로 application.yaml 파일을 읽는다.
주의사항이 있다면 현재 spring-config-service가 먼저 준비가 되어야 된다.
application.yaml 파일내에 token은 삭제하고 token은 spring-config-service를 통해서 수신한다.

[주의사항]
절대로 local directory일 경우에는 git push 하면 안된다.

준비작업
#---------------------------------------------------------------------------------------------------------------------
[dependency]
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>
#---------------------------------------------------------------------------------------------------------------------
[bootstrap.yml] 추가
spring:
  cloud:
    config:
      uri: http://127.0.0.1:8888
      name: ecommerce
#---------------------------------------------------------------------------------------------------------------------
[application.yml]
여기서 token 정보를 삭제한다. 왜냐하면 이 정보는 spring-config-service를 통해서 가져올 것이다.

(삭제)
token:
  expiration_time: 86400000
  secret: user_token

#---------------------------------------------------------------------------------------------------------------------
[UserController.java] 수정
    @GetMapping("/health_check")
    @Timed(value="users.status", longTask = true)
    public String status() {
        return String.format("It's Working in User Service"
                + ", port(local.server.port)=" + env.getProperty("local.server.port")
                + ", port(server.port)=" + env.getProperty("server.port")
                + ", gateway ip=" + env.getProperty("gateway.ip")
                + ", message=" + env.getProperty("greeting.message")
                + ", token secret=" + env.getProperty("token.secret")  ----->> 이것은 spring-config-service에서 제공한다.
                + ", token expiration time=" + env.getProperty("token.expiration_time"));
    }
#---------------------------------------------------------------------------------------------------------------------
[실행]
http://127.0.0.1:8000/user-service/health_check
#---------------------------------------------------------------------------------------------------------------------
[user-service] 로그
2024-08-17 09:10:18.122  INFO [user-service,,] 21432 --- [  restartedMain] c.c.c.ConfigServicePropertySourceLocator :
        Fetching config from server at : http://127.0.0.1:8888  spring-config-service 요청한다.
2024-08-17 09:10:18.360  INFO [user-service,,] 21432 --- [  restartedMain] c.c.c.ConfigServicePropertySourceLocator : Located environment: name=ecommerce, profiles=[default], label=null, version=bfbbdf470ab6a288579da7b93e00196c275c048a, state=null
2024-08-17 09:10:18.362  INFO [user-service,,] 21432 --- [  restartedMain] b.c.PropertySourceBootstrapConfiguration : Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource
        {name='bootstrapProperties-file://c:\Programming(23-08-15)\zRepository\zlogcal-dir/file:c:\Programming(23-08-15)\zRepository\zlogcal-dir\ecommerce.yml'}]
        여기서 파일을 읽는다.

#---------------------------------------------------------------------------------------------------------------------


