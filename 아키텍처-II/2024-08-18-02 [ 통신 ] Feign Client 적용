RestTemplate보다는 직관적이다.

Load Balanced 을 지원한다.

FeignClient를 활용하기 위해서는 pom.xml 파일과 main 프로그램에 feign 사용여부에 대한
이니셜을 남겨둔다.
실제 호출을 위한 인터페이스를 작성하게 되는데
@FeignClient 라는 어노테이션과 실제 호출해야 되는 url에 대한 매핑 작업을 하면 된다.

[사전]
    - RestTemplate 의 로드밸런서 기능을 빈으로 등록해야 된다.
#-----------------------------------------------------------------------------------------------------------------------
[spring-config-service]
    [pom.xml]
              #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[native-repository]
    [ecommerce.yml]
        08-18-02
        order_service:
          # case1. 로드밸런서를 api게이트웨이 맡길경우 @LoadBalanced 선언되면 에러가 발생
          # url: http://127.0.0.1:8000/order-service/%s/orders

          # case2. 로드밸런서를 호출하는 템플릿에서 할 경우, 이경우에는 @LoadBalanced 가 선언되어야 된다, ●
          url: http://ORDER-SERVICE/order-service/%s/orders

          exception:
            order_is_empty: User's orders is empty.(#####)
#-----------------------------------------------------------------------------------------------------------------------
[user-service]
    [pom.xml]
                   <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-openfeign</artifactId>
                   </dependency>
            #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
          - UserServiceApplication.java
            EnableFeignClients Bean으로 등록

            @EnableFeignClients
            @SpringBootApplication
            public class UserServiceApplication {
            	// 여기서 등록된 빈들은 다른 객체에서 주입받아서 사용한다. IOC 좋구먼
                public static void main(String[] args) {
                    SpringApplication.run(UserServiceApplication.class, args);
                }

                @Bean
                public FeignErrorDecoder getFeignErrorDecoder() {
                    return new FeignErrorDecoder();
                }
                ....
            }
            #-----------------------------------------------------------------------------------------------------------
          - tpsSendRecvOrderService.java

              package com.example.userservice.business.client;

              import org.springframework.cloud.openfeign.FeignClient;
              import com.example.userservice.web.transfer.vo.ResponseOrderFormVO;

              // 요청하고자 하는 서비스 명시
              @FeignClient(name="order-service")
              public interface tpsSendRecvOrderService {
                // 요청하고자 하는 서비스 형식 명시
                  @GetMapping("/order-service/{userId}/orders")
                  List<ResponseOrderFormVO> getOrders(@PathVariable String userId);
              }
            #-----------------------------------------------------------------------------------------------------------
          - UserServiceASImpl.java
              @Service
              public class UserServiceASImpl implements UserServiceAS {
                  IUserRepositoryDAO IUserRepositoryDAO;
                  BCryptPasswordEncoder passwordEncoder;
                  UserServiceDC userServiceDC;
                  Environment env;
                  RestTemplate restTemplate;

                 @Override
                 public UserDto getUserByUserId(String userId) {

                   UserDto userDto = userServiceDC.findByUserId(userId);
                   String orderUrl = "http://127.0.0.1:8000/order-service/%s/orders";

                    /* Using as rest template */
                    List<ResponseOrderFormVO> orders = new ArrayList<>();
                    List<ResponseOrder> orderList = tpsSendRecvOrderService.getOrders(userId)
                    userDto.setOrders(orderList);

                    return userDto;
              }

            #-----------------------------------------------------------------------------------------------------------
            @RestController
            @RequestMapping("/")
            public class UserController {
              private final Logger log = LoggerFactory.getLogger(this.getClass());
              private UserServiceAS userServiceAS;

              // 사용자 정보, 주문 내역조회
              @GetMapping("/users/{userId}")
              public ResponseEntity<ResponseUserFormVO> getUser(@PathVariable("userId") String userId) {
              	UserDto userDto = userServiceAS.getUserByUserId(userId);
                ResponseUserFormVO returnValue = new ModelMapper().map(userDto, ResponseUserFormVO.class);

                // 정상적인 것은 200이나 보다 정확도를 높이려면 201를 넣는 것이 맞다.
                // body에 ResponseUser를 셋팅한다.
                return ResponseEntity.status(HttpStatus.OK).body(returnValue);
              }
            }
#-----------------------------------------------------------------------------------------------------------------------
[gateway-service]
    [pom.xml]
            #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[테스트]
