#-----------------------------------------------------------------------------------------------------------------------
[spring-config-service]
    [pom.xml]
              #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[native-repository]
    [ecommerce.yml]
            # [2024-08-18-01]
            order_service:
              # case1. 로드밸런서를 api게이트웨이 맡길경우 @LoadBalanced 선언되면 에러가 발생
              #  url: http://127.0.0.1:8000/order-service/%s/orders
              # case2. 로드밸런서를 호출하는 템플릿에서 할 경우, 이경우에는 @LoadBalanced 가 선언되어야 된다,.
              url: http://ORDER-SERVICE/order-service/%s/orders
              exception:
        ●       order_is_empty: User's orders is empty.(#####)
#-----------------------------------------------------------------------------------------------------------------------
[user-service]
    [pom.xml]
            #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            logging:
              level:
                com.example.userservice.tpm: DEBUG
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            public class UserServiceApplication {

                // 여기서 등록된 빈들은 다른 객체에서 주입받아서 사용한다. IOC 좋구먼

                public static void main(String[] args) {
                    SpringApplication.run(UserServiceApplication.class, args);
                }

                @Bean
                public Logger.Level feignLoggerLevel() {
                    return Logger.Level.FULL;
                }

                @Bean
                public FeignErrorDecoder getFeignErrorDecoder() {
                    return new FeignErrorDecoder();
                }
            }

            #-----------------------------------------------------------------------------------------------------------
            public class FeignErrorDecoder implements ErrorDecoder {
                Environment env;

                @Autowired
                public FeignErrorDecoder(Environment env) {
                    this.env = env;
                }

            	public FeignErrorDecoder() {
            		// TODO Auto-generated constructor stub
            	}

            	@Override
                public Exception decode(String methodKey, Response response) {
                    switch(response.status()) {
                        case 400:
                            break;
                        case 404:
                            if (methodKey.contains("getOrders")) {
                                return new ResponseStatusException(HttpStatus.valueOf(response.status()),
                                		// 2022-11-29-1 user-service.yml에 order.exception 관련내용을 명시해서 사용하자
                                        env.getProperty("order_service.exception.orders_is_empty")); // user-service.yml
                            }
                            break;
                        default:
                            return new Exception(response.reason());
                    }

                    return null;
                }
            }
            #-----------------------------------------------------------------------------------------------------------
            UserServiceASImpl.java

                else if(foo_t2_1) {
                    /* 2) Using a feign client */
                    /* Feign exception handling */
                    /* ErrDecoder에서 다음의 예외처리를 해주므로 다음의 해결책으로 정리한다. */
                    try {
                        log.debug("요청--->tpsSendRecvOrderService>"+tpsSendRecvOrderService);
                        ordersList = tpsSendRecvOrderService.getOrders(userId);
                        log.debug("응답--->ordersList>"+ordersList);
                    } catch (FeignException ex) {
                        log.error("--Feign client 호출에러");
                        log.error(ex.getMessage());
                    }
                }

            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[gateway-service]
    [pom.xml]
            #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            08-18-02
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[테스트]
