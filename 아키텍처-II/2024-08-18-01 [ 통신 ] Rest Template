여기서 중요하게 생각할 점은
타서비스를 호출을 위해 resttemplate를 사용하고
resttemplate에서 로드밸런스 기능을 활성화 하기 위해 @loadbalanced를 사용했다는 점이다.

● RestTemplate 을 활용해서 UserService에서 OrderSerice를 요청해보자
   실제 요청 환경정보를 user-service.yml에서 등록해서 사용한다.
   RestTemplate 빈의 정보는 main 클래스에 등록한다.

[사전]
    - RestTemplate 의 로드밸런서 기능을 빈으로 등록해야 된다.
#-----------------------------------------------------------------------------------------------------------------------
[spring-config-service]
    [pom.xml]
              #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
              profiles:
                active: native
                # active: git

              cloud:
                config:
                  server:
                    native:
                      search-locations: file:///C:\Programming(23-08-15)\zRepository\r2022-11-17-spring-cloud-config-native-repository
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[native-repository]
    [ecommerce.yml]
        order_service:
          # case1. 로드밸런서를 api게이트웨이 맡길경우 @LoadBalanced 선언되면 에러가 발생
          # url: http://127.0.0.1:8000/order-service/%s/orders

          # case2. 로드밸런서를 호출하는 템플릿에서 할 경우, 이경우에는 @LoadBalanced 가 선언되어야 된다, ●
          url: http://ORDER-SERVICE/order-service/%s/orders

          exception:
            order_is_empty: User's orders is empty.(#####)
#-----------------------------------------------------------------------------------------------------------------------
[user-service]
    [pom.xml]
          #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
          #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
          #-----------------------------------------------------------------------------------------------------------
    [프로그램]
          - UserServiceApplication Application에서 RestTemplate Bean으로 등록
            @SpringBootApplication
            public class UserServiceApplication {
            	// 여기서 등록된 빈들은 다른 객체에서 주입받아서 사용한다. IOC 좋구먼
                public static void main(String[] args) {
                    SpringApplication.run(UserServiceApplication.class, args);
                }

                /*
                 * 1번 방법 Bean 만을 선언해서 할 경우는
                 * user-service.yml에서
                 * http:
                 */
                @Bean
                @LoadBalanced                               ●
                public RestTemplate getRestTemplate() {
                    return new RestTemplate();
                }
                ....
            }
          #-----------------------------------------------------------------------------------------------------------
          - UserServiceASImpl
          @Service
          public class UserServiceASImpl implements UserServiceAS {
              IUserRepositoryDAO IUserRepositoryDAO;
              BCryptPasswordEncoder passwordEncoder;
              UserServiceDC userServiceDC;
              Environment env;
              RestTemplate restTemplate;

             @Override
             public UserDto getUserByUserId(String userId) {

               UserDto userDto = userServiceDC.findByUserId(userId);
               String orderUrl = "http://127.0.0.1:8000/order-service/%s/orders";

                /* Using as rest template */
                List<ResponseOrderFormVO> orders = new ArrayList<>();

                □□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□
                □ env.getProperty("order_service.url") 이것의 정보를 받기위해서는 어디선가 정보가 등록되어 있어야 한다.
                □ 어디서 spring-config-service가 user-service로 주입해준다.
                □ spring-config-service는 native 방식으로 user-service.yaml 파일을 읽어서 user-service.yaml에 정의된
                □ order_service.url을 넘겨준다.
                □□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□
                String orderUrl = String.format(env.getProperty("order_service.url"), userId);

                ResponseEntity<List<ResponseOrderFormVO>> orderListResponse =    ●
                        restTemplate.exchange( orderUrl,
                                               HttpMethod.GET,
                                               null,
                                               new ParameterizedTypeReference<List<ResponseOrderFormVO>>() {
                        });

                ordersList = orderListResponse.getBody();
                userDto.setOrders(ordersList);

                return userDto;
          }

          #-----------------------------------------------------------------------------------------------------------
          @RestController
          @RequestMapping("/")
          public class UserController {
              private final Logger log = LoggerFactory.getLogger(this.getClass());
              private UserServiceAS userServiceAS;

              // 사용자 정보, 주문 내역조회
              @GetMapping("/users/{userId}")
              public ResponseEntity<ResponseUserFormVO> getUser(@PathVariable("userId") String userId) {
              	UserDto userDto = userServiceAS.getUserByUserId(userId);
                ResponseUserFormVO returnValue = new ModelMapper().map(userDto, ResponseUserFormVO.class);

                // 정상적인 것은 200이나 보다 정확도를 높이려면 201를 넣는 것이 맞다.
                // body에 ResponseUser를 셋팅한다.
                return ResponseEntity.status(HttpStatus.OK).body(returnValue);
              }
          }
#-----------------------------------------------------------------------------------------------------------------------
[gateway-service]
    [pom.xml]
            #-----------------------------------------------------------------------------------------------------------
    [application.yaml]
            #-----------------------------------------------------------------------------------------------------------
    [bootstrap]
            #-----------------------------------------------------------------------------------------------------------
    [프로그램]
            #-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
[테스트]
